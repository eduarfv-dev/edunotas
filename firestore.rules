rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function getUserRole() {
      // Consider adding error handling here in case the user doc or role field doesn't exist
      return get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role;
    }

    match /usuarios/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth != null && (
                      request.auth.uid == userId ||
                      getUserRole() == 'admin' ||
                      getUserRole() == 'teacher'
                    );
      allow create, delete: if request.auth != null && getUserRole() == 'admin';
    }

    match /cursos/{courseId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (getUserRole() == 'teacher' || getUserRole() == 'admin');
    }

    match /grades/{gradeId} {
      allow read: if request.auth != null && (
                      request.auth.uid == resource.data.studentId ||
                      request.auth.uid == resource.data.teacherId ||
                      getUserRole() == 'admin'
                    );
      allow create, update: if request.auth != null && (
                                request.auth.uid == request.resource.data.teacherId ||
                                getUserRole() == 'admin'
                              ) &&
                              request.resource.data.keys().hasAll(['courseId', 'studentId', 'teacherId', 'assignmentName', 'score', 'gradeDate']) &&
                              request.resource.data.score is number;
      allow delete: if request.auth != null && (
                      request.auth.uid == resource.data.teacherId ||
                      getUserRole() == 'admin'
                    );
    }
  }
}